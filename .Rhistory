l=='Germany'
l=='Ireland'
l=='Mexico'
l=='Sweden'
l=='France'
l=='Netherlands'
l=='New Zealand'
l=='Australia'
l=='Denmark'
l=='Belgium'
l=='Hong Kong'
l
l=='Luxembourg'
l=='Singapore'
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
worldmap$region
merge(x=ks18,y=worldmap,by.x="country",by.y="region")
merge(x=ks18,y=worldmap,by.x="country",by.y="region",all.x=TRUE)
a<-new<-ks18%>%group_by(country)%>%summarise(num=n())
View(a)
b<-new<-ks18%>%group_by(country)%>%summarise(num=n())
a<-merge(x=ks18,y=worldmap,by.x="country",by.y="region",all.x=TRUE)
a<-left_join(x=ks18,y=worldmap,by.x="country",by.y="region",all.x=TRUE)
a<-left_join(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"),all.x=TRUE)
a<-merge(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"),all.x=TRUE)
View(worldmap)
a<-merge(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"),all.y=TRUE)
a<-right_join(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"))
a<-right_join(x=ks18,y=worldmap,by=("country"=="region"))
a<-merge(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"))
a<-merge(data.frame(ks18),data.frame(worldmap),by.x=c("country"),by.y=c("region"), y.all=TRUE)
names(ks18$country)="region"
colnames(ks18)
names(ks18$country)->"region"
colnames(ks18)
names(ks18$country)<-"region"
colnames(ks18)
names(ks18)["country"]<-"region"
(ks18)["country"]
ks18["country"]
ks18["country",]
ks18[,"country"]
data_2018<-read.csv(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
library(data.table)
data_2018<-fread(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
colnames(ks18)["country"]#<-"region"
colnames(ks18)["country"]
colnames(ks18)
colnames(ks18)[13]
colnames(ks18)[13]<-"region"
colnames(k18)
colnames(k18)
colnames(ks18)
a<-merge((ks18),(worldmap),by("region"), y.all=TRUE)
a<-left_join((ks18),(worldmap),by("region"))
a<-left_join((ks18),(worldmap),by=("region"))
a<-left_join(ks18,worldmap,by="region")
class(ks18)
class(worldmap)
data.frame(ks18)
ks18<-data.frame(ks18)
class(ks16)
class(ks18)
a<-left_join(ks18,worldmap,by="region")
a<-merge(ks18,worldmap,by="region", all.y = TRUE)
a<-left_join(ks18,worldmap,by="region")
rm(list=ls())
library(data.table)
data_2016<-fread(file = "ks-projects-201612.csv", sep = ',')
rm(list=ls())
library(data.table)
data_2018<-fread(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
library(maps)
library(googleVis)
library(ggmap)
library(plotly)
library(leaflet)
#load worldmap data
worldmap<-map_data("world")
as.data.frame(worldmap)
worldmap<-as.data.frame(worldmap)
a<-merge(ks18,worldmap,by.x="country",by.y="region",all.y=TRUE)
a<-merge(ks18,worldmap,by.x="country",by.y="region",all.y=TRUE,allow.cartesian = TRUE)
a<-right_join(ks18,worldmap,by.x="country",by.y="region")
#change column name of country into region
colnames(ks18)[13]<-"region"
worldmap<-as.data.frame(worldmap)
a<-right_join(ks18,worldmap, by="region")
View(worldmap)
a<-join(ks18,worldmap, by="region")
a<-inner_join(ks18,worldmap, by="region")
a<-full_join(ks18,worldmap, by="region")
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=country, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
library(plotly)
library(maps)
library(googleVis)
library(ggmap)
library(plotly)
library(leaflet)
plotly(plot)
new<-ks18%>%group_by(country)%>%summarise(num=n())
new<-ks18%>%group_by(country)%>%summarise(num=n())
new<-ks18%>%group_by(region)%>%summarise(num=n())
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
plotly(plot)
ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
ggplotly(plot)
worldmap<-as.data.frame(worldmap)
View(worldmap)
a<-full_join(ks18,worldmap, by="region")
new<-ks18%>%group_by(region)%>%summarise(num=n())
View(new)
a<-full_join(new,worldmap, by="region")
View(a)
a<-right_join(new,worldmap, by="region")
new<-ks18%>%group_by(region)%>%summarise(num=n())
a<-right_join(new,worldmap, by="region")
a<-left_join(new,worldmap, by="region")
View(a)
m <- leaflet(a) %>%
addProviderTiles()%>%
addPolygons(fillColor = ~num)
m <- leaflet(a) %>%
addTiles()%>%
addPolygons(fillColor = ~num)
m <- leaflet(a) %>%
addTiles()%>%
addPolygons(fillColor = ~num)
unique(ks18$main_category)
shiny::runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
?wordcloud
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
knitr::opts_chunk$set(echo = TRUE)
###################
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), width=12,height=8)
testcloud<-paste(ks18$name[0:400000], collapse='')
docs <- Corpus(VectorSource(testcloud))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
###############
dtm <- TermDocumentMatrix(docs)
###############
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
###################
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"), width=12,height=8)
runApp('Project1/Project1')
#####################################################################
#################Rest of the world####################################
####data for US tab with united stated selected#########################################
US_reactive <- reactive({
isolate({
withProgress({
setProgress(message = "Processing my plot for you...")
})})
ks18%>%filter(region != "United States")})
ks18%>%filter(region != "United States")
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
Rest_US_reactive()
unique(ks18%>%filter(region!="United States")%>%select(main_category))
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
class(ks18$launched_date)
range(ks18$launched_date)
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
ks18%>%filter(region == "United States")%>%mutate(num=n())
ks18%>%filter(region == "United States")%>%group_by(main_category)mutate(num=n())
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=reorder(main_category,-num),y=num, fill=category))+geom_bar(stat="identity")
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num, fill=category))+geom_bar(stat="identity")
runApp('Project1/Project1')
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num))+geom_bar(stat="identity")
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num,))+geom_bar(stat="identity",fill=category)
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num,))+geom_bar(stat="identity",aes(fill=category))
runApp('Project1/Project1')
runApp('Project1/Project1')
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())
runApp('Project1/Project1')
runApp('Project1/Project1')
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num,))+geom_bar(stat="identity",aes(fill=category))
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num,))+geom_bar(stat="identity",aes(fill=category))
ks18%>%filter(region == "United States")%>%group_by(main_category)%>%mutate(num=n())%>%ggplot(aes(x=main_category,y=num,))+geom_bar(stat="identity",aes(fill=category))
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
?incProgress
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
unique(ks18$main_category)
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
unique((ks18)%>%filter(region!="United States")),
unique((ks18)%>%filter(region!="United States"))
unique((ks18)%>%filter(region!="United States")%>%select(region))
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
shiny::runApp('Project1/Project1')
?DT::datatable
rm(list = ls())
shiny::runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
install.packages("wesanderson")
runApp('Project1/Project1')
runApp('Project1/Project1')
install.packages("ggthemes")
install.packages("ggthemes")
install.packages("ggthemes")
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
shiny::runApp('Project1/Project1')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
