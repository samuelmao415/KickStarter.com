a<-right_join(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"))
a<-right_join(x=ks18,y=worldmap,by=("country"=="region"))
a<-merge(x=ks18,y=worldmap,by.x=c("country"),by.y=c("region"))
a<-merge(data.frame(ks18),data.frame(worldmap),by.x=c("country"),by.y=c("region"), y.all=TRUE)
names(ks18$country)="region"
colnames(ks18)
names(ks18$country)->"region"
colnames(ks18)
names(ks18$country)<-"region"
colnames(ks18)
names(ks18)["country"]<-"region"
(ks18)["country"]
ks18["country"]
ks18["country",]
ks18[,"country"]
data_2018<-read.csv(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
library(data.table)
data_2018<-fread(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
colnames(ks18)["country"]#<-"region"
colnames(ks18)["country"]
colnames(ks18)
colnames(ks18)[13]
colnames(ks18)[13]<-"region"
colnames(k18)
colnames(k18)
colnames(ks18)
a<-merge((ks18),(worldmap),by("region"), y.all=TRUE)
a<-left_join((ks18),(worldmap),by("region"))
a<-left_join((ks18),(worldmap),by=("region"))
a<-left_join(ks18,worldmap,by="region")
class(ks18)
class(worldmap)
data.frame(ks18)
ks18<-data.frame(ks18)
class(ks16)
class(ks18)
a<-left_join(ks18,worldmap,by="region")
a<-merge(ks18,worldmap,by="region", all.y = TRUE)
a<-left_join(ks18,worldmap,by="region")
rm(list=ls())
library(data.table)
data_2016<-fread(file = "ks-projects-201612.csv", sep = ',')
rm(list=ls())
library(data.table)
data_2018<-fread(file = "ks-projects-201801.csv", sep = ',')
ks18<-data_2018
library(dplyr)
library(tidyr)
library(chron)
library(data.table)
#deadline and launched are characters in the df, which should be num
str(ks18)
#change deadline into date formate
ks18$deadline<-as.Date(ks18$deadline, "%Y-%m-%d")
#separate launched column into launced date and launced time
ks18<-separate(data=ks18,col=launched,into=c("launched_date","launched_time"), sep = " ")
#change the class of both launched date and launched time
class(ks18$launched_date) #character
class(ks18$launched_time) #character
ks18$launched_date<-as.Date(ks18$launched_date, "%Y-%m-%d")
ks18$launched_time<-chron(times=ks18$launched_time)
class(ks18$launched_date) #Date
class(ks18$launched_time) #times
#change country name for mapping
#https://help.kickstarter.com/hc/en-us/articles/115005128594-Who-can-use-Kickstarter-
#Unknow ES and CH
ks18$country[ks18$country=="N,0\"\""]<-"Other"
ks18$country[ks18$country=="ES"]<-"Other"
ks18$country[ks18$country=="CH"]<-"Other"
ks18$country[ks18$country=="JP"]<-"Japan"
ks18$country[ks18$country=="GB"]<-"UK"
ks18$country[ks18$country=="US"]<-"USA"
ks18$country[ks18$country=="CA"]<-"Canada"
ks18$country[ks18$country=="AU"]<-"Austria"
ks18$country[ks18$country=="NO"]<-"Norway"
ks18$country[ks18$country=="IT"]<-"Italy"
ks18$country[ks18$country=="DE"]<-"Germany"
ks18$country[ks18$country=="IE"]<-"Ireland"
ks18$country[ks18$country=="MX"]<-"Mexico"
ks18$country[ks18$country=="SE"]<-"Sweden"
ks18$country[ks18$country=="FR"]<-"France"
ks18$country[ks18$country=="NL"]<-"Netherlands"
ks18$country[ks18$country=="NZ"]<-"New Zealand"
ks18$country[ks18$country=="AT"]<-"Australia"
ks18$country[ks18$country=="DK"]<-"Denmark"
ks18$country[ks18$country=="BE"]<-"Belgium"
ks18$country[ks18$country=="HK"]<-"Hong Kong"
ks18$country[ks18$country=="LU"]<-"Luxembourg"
ks18$country[ks18$country=="SG"]<-"Singapore"
unique(ks18$country)
#hongkong doesnt have match in world map
library(maps)
library(googleVis)
library(ggmap)
library(plotly)
library(leaflet)
#load worldmap data
worldmap<-map_data("world")
as.data.frame(worldmap)
worldmap<-as.data.frame(worldmap)
a<-merge(ks18,worldmap,by.x="country",by.y="region",all.y=TRUE)
a<-merge(ks18,worldmap,by.x="country",by.y="region",all.y=TRUE,allow.cartesian = TRUE)
a<-right_join(ks18,worldmap,by.x="country",by.y="region")
#change column name of country into region
colnames(ks18)[13]<-"region"
worldmap<-as.data.frame(worldmap)
a<-right_join(ks18,worldmap, by="region")
View(worldmap)
a<-join(ks18,worldmap, by="region")
a<-inner_join(ks18,worldmap, by="region")
a<-full_join(ks18,worldmap, by="region")
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=country, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
library(plotly)
library(maps)
library(googleVis)
library(ggmap)
library(plotly)
library(leaflet)
plotly(plot)
new<-ks18%>%group_by(country)%>%summarise(num=n())
new<-ks18%>%group_by(country)%>%summarise(num=n())
new<-ks18%>%group_by(region)%>%summarise(num=n())
plot<-ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
plotly(plot)
plotly(plot)
ggplot(data=new) +
geom_map(map =worldmap, aes(map_id=region, fill=num))+
expand_limits(x=worldmap$long, y=worldmap$lat)+
scale_fill_continuous(high='red2', low='white')
ggplotly(plot)
worldmap<-as.data.frame(worldmap)
View(worldmap)
a<-full_join(ks18,worldmap, by="region")
new<-ks18%>%group_by(region)%>%summarise(num=n())
View(new)
a<-full_join(new,worldmap, by="region")
View(a)
a<-right_join(new,worldmap, by="region")
new<-ks18%>%group_by(region)%>%summarise(num=n())
a<-right_join(new,worldmap, by="region")
a<-left_join(new,worldmap, by="region")
View(a)
m <- leaflet(a) %>%
addProviderTiles()%>%
addPolygons(fillColor = ~num)
m <- leaflet(a) %>%
addTiles()%>%
addPolygons(fillColor = ~num)
m <- leaflet(a) %>%
addTiles()%>%
addPolygons(fillColor = ~num)
shiny::runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
runApp('Project1/Project1')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='samuelmao415',
token='FBCB95F796891E5BF8A7219C84E23B32',
secret='10nSNdW2XVWQdcWMSOyFxVKO9DZVykzkxREIyX78')
getwd()
ks18<-fread(file = "./ks18.csv",sep = ',',fill=TRUE)
getwd()
ks18<-fread(file = "ks18.csv",sep = ',',fill=TRUE)
ks18<-fread(file = "ks18.csv",sep = ',',fill=TRUE)
ks18<-fread(file = "/.ks18.csv",sep = ',',fill=TRUE)
?includeMarkdown
getwed
getwd
getwd()
setwd(C:/Users/samuelmao/Desktop/DataScience/Project1/Project1)
setwd("C:/Users/samuelmao/Desktop/DataScience/Project1/Project1")
ks18<-fread(file = "./ks18.csv",sep = ',',fill=TRUE)
View(ks18)
bycountry<-fread(file="./bycountry.csv")
runApp()
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
View(temp)
#1
temp%>%group_by(Gender)%>%summarise(avgheart=mean(Heart.Rate),avgtemp=mean(Body.Temp))%>%
ggplot(aes(x=gender,y=Heart.Rate))+geom_col()
#1
temp%>%group_by(Gender)%>%summarise(avgheart=mean(Heart.Rate),avgtemp=mean(Body.Temp))%>%
ggplot(aes(x=gender,y=Heart.Rate))+geom_col()
#1
temp%>%group_by(Gender)%>%summarise(avgheart=mean(Heart.Rate),avgtemp=mean(Body.Temp))%>%
ggplot(aes(x=Gender,y=Heart.Rate))+geom_col()
#1
temp%>%group_by(Gender)%>%summarise(avgheart=mean(Heart.Rate),avgtemp=mean(Body.Temp))%>%
ggplot(aes(x=Gender,y=avgtemp))+geom_col()
#1
temp%>%group_by(Gender)%>%summarise(avgheart=mean(Heart.Rate),avgtemp=mean(Body.Temp))%>%
ggplot(aes(x=Gender,y=avgheart))+geom_col()
temp%>%ggplot(aes(x=Heart.Rate,y=Body.Temp))+geom_point(aes(fill=Gender))
temp%>%ggplot(aes(x=Heart.Rate,y=Body.Temp))+geom_point(aes(color=Gender))
temp%>%ggplot(aes(x=Heart.Rate,y=Body.Temp))+geom_point(aes(color=Gender))+geom_line()
temp%>%ggplot(aes(x=Heart.Rate,y=Body.Temp))+geom_point(aes(color=Gender))+geom_smooth()
#1
summary(temp)
lm(temp,Heart.Rate~Body.Temp)
?lm
lm(Heart.Rate~Body.Temp,temp)
lm(Heart.Rate~Gender,temp)
lm(Heart.Rate~Body.Temp,temp)
#1
summary(temp)
#1
summary(temp)
?t.test
#3
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
#4
t.test(temp[Gender=="Male"][Body.Temp],temp[Gender=="Female"][Body.Temp], alternative = "two.sided")
temp[Gender=="Male"]
temp[,Gender=="Male"]
#4
t.test(temp[temp$Gender=="Male"][Body.Temp],temp[tem[$Gender=="Female"][Body.Temp], alternative = "two.sided")
#4
t.test(temp[temp$Gender=="Male"][Body.Temp],temp[temp$Gender=="Female"][Body.Temp], alternative = "two.sided")
temp$Gender=="Male"
temp[temp$Gender=="Male"]
temp[temp$Gender=="Male",]
temp[temp$Gender=="Male",Body.Temp]
temp[Gender=="Male",Body.Temp]
temp[Gender=="Male","Body.Temp"]
temp[Gender]
temp[Gender,]
temp["Gender"]
temp["Gender"=="Male","Body.Temp"]
temp["Gender"=="Male",]
temp["Gender"=="Male",Body.Temp]
temp["Gender"=="Male","Body.Temp"]
temp["Gender"=="Male"]
temp["Gender"=="Male",]["Body.Temp"]
temp["Gender"=="Male",][Body.Temp]
temp[Gender=="Temp"]
temp[Gender=="Male"]
temp[Gender=="Female"]
temp[Gender==Female]
temp$Gender==Female]
temp$Gender==Female
temp$Gender=="Female"
temp$Gender=="Female"[temp$Body.Temp]
temp$Gender=="Female"[temp]
(temp$Gender=="Female")[temp]
#4
temp
#4
temp[Gender=="Male"]
#4
temp[Gender]
#4
temp["Gender"]
#4
temp["Gender"=="Male"]
#4
temp["Gender"==Male]
#4
temp$Body.Temp[temp$Gender=='Male']
#4
malebody<-temp$Body.Temp[temp$Gender=='Male']
femalebody<-temp$Body.Temp[temp$Gender=='Female']
t.test(malebody,femalebody, alternative = "two.sided")
#3
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided") #98.12~98.37 vs our data:98.24
?boot
install.packages("boot")
library(boot)
boot(t.test(malebody,femalebody, alternative = "two.sided"))
?boot
newdata<-cbind(malebody,femalebody)
boot(newdata,t.test)
boot(newdata,t.test,R=10)
#5
maleheart<-temp$Heart.Rate[temp$Gender=='Male']
femaleheart<-temp$Heart.Rate[temp$Gender=='Female']
t.test(malebody,femalebody, alternative = "greater")
library(datasets)
data("PlantGrowth")
a<-data("PlantGrowth")
a
a<-data(PlantGrowth)
a
PlantGrowth
PlantGrowth%%ggplot(aes(x=group,y=weight))+geom_boxplot()
PlantGrowth%%ggplot(aes(x=group,y=weight))+geom_boxplot()
ggplot(PlantGrowth,aes(x=group,y=weight))+geom_boxplot()
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control)
Weight.Loss                                              #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
Category
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
?aov
#2
aov(weight~group,PlantGrowth)
#2
summary(aov(weight~group,PlantGrowth))
#1
ggplot(PlantGrowth,aes(x=group,y=weight))+geom_boxplot()
#2
summary(aov(weight~group,PlantGrowth))
#2
summary(PlantGrowth)
#2
std(PlantGrowth)
#2
apply(PlantGrowth, std)
#2
sapply(PlantGrowth, std)
#2
sapply(PlantGrowth, sd)
#2
sd(PlantGrowth)
#2
sd(PlantGrowth$weight)
#2
PlantGrowth%>%group_by(group)%>%summarise(sd(weight))
#2
PlantGrowth%>%group_by(group)%>%summarise(standard=sd(weight))
#2
new<-PlantGrowth%>%group_by(group)%>%summarise(standard=sd(weight))
bartlett.test(new$standard)
?bartlett.test
bartlett.test(weight~group,PlantGrowth)
summary(aov(weight~group,PlantGrowth))
bartlett.test(weight~group,PlantGrowth)
data("HairEyeColor")
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
#2
HairEyeColor%>%filter(Sex=="Female")
#2
HairEyeColor%>%filter(Sex==Female)
#2
q3<-as.data.frame(HairEyeColor)
q3
q3%>%filter(Sex==Female)
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye=="blue",Eye=="brown")
q3%>%select("Sex","Eye","Hair")%>%filter(Sex=="Female",Eye=="blue",Eye=="brown")
q3%>%select(Sex,Eye,Hair)#%>%filter(Sex=="Female",Eye=="blue",Eye=="brown")
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye=="Blue",Eye=="Brown")
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot(shade=TRUE)
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot()
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))
q4<-q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))
mosaicplot(q4,shade=TRUE)
-q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot(shade=TRUE)
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot(shade=TRUE)
q4<-q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))
#3
chisq.test(q4)
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.data
q4
q4<-q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
q3%>%select(Sex,Eye,Hair)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot(shade=TRUE)
q4
#2
q3<-as.data.frame(HairEyeColor)
q3
q4<-q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
q4
q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%mosaicplot(shade=TRUE)
data("HairEyeColor")
data("HairEyeColor")
HairEyeColor
#2
q3<-(HairEyeColor)
q4<-q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
class(q3)
q4<-q3%>%select(Sex,Eye,Hair,Freq)#%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
as.data.frame(q3)
q4<-q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
q3<-as.data.frame(q3)
q4<-q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
q4
q4%>%mosaicplot(shade=TRUE)
dimnames(q4)=list(Eye=c("Brown,Blue"),Hair=c("Brown","Blond","Black","Red")
dimnames(q4)=list(Eye=c("Brown,Blue"),Hair=c("Brown","Blond","Black","Red"))
q4<-q3%>%select(Sex,Eye,Hair,Freq)%>%filter(Sex=="Female",Eye==c("Blue","Brown"))%>%select(-Sex)
table(q4)
#2
q3<-(HairEyeColor)
q3
q3[,,2]
q3[,,2][1:2,]
q3[1:2,,2]
q3[,1:2,2]
q4<-q3[,1:2,2]
q4%>%mosaicplot(shade=TRUE)
chisq.test(q4)
q4%>%mosaicplot(shade=TRUE)
chisq.test(q4)
